
const [count, setCount] = React.useState(0);
const calculation = useMemo(() => expensiveCalculation(count), [count]);
const usernameRef = useRef(null);
    <input type="text" ref={usernameRef}/>
    console.log("username: " + usernameRef.current.value);
const count = useSelector((state) => state.counter.value);
    <h1>{count}</h1>


{items.map((item) => ( <div key={item.id}>{item.label}</div> ))}
<div className="btn-panel {this.props.visible ? 'show' : 'hidden'}">
_____________________________________________________________
// HIGHER LEVEL COMPONENTS
const withAuthentication = (WrappedComponent) => {
    return const  WithAuthentication = (props)=> {
        const isAuthenticated = authenticate();
        return <WrappedComponent {...props} isAuthenticated={isAuthenticated}/>;
    };
};
const MyComponentWithAuthentication = withAuthentication(MyComponent);

_____________________________________________________________
// CODE SPLITTING LAZY AND SUSPENSE
const MyComponent = lazy(() => import('./MyComponent'));
<Suspense fallback={<div>Loading...</div>}> <MyComponent/> </Suspense>
_____________________________________________________________
// ROUTER
(index.tsx)
ReactDOM.createRoot(root).render(
    <BrowserRouter>
        <Routes>
            <Route path="/" element={<Home/>}/>
            <Route path="dashboard" element={<Dashboard/>}>
                <Route index element={<RecentActivity/>}/>
                <Route path="project/:id" element={<Project/>}/>
            </Route>
        </Routes>
    </BrowserRouter>
);
_____________________________________________________________
// REDUX
#1 WRAP (index.tsx or Component) in PROVIDER to STORE
<Provider store={store}>
    <App/>
</Provider>


#2 CREATE STORE...
export const store = configureStore({
    reducer: {
        cats: catsSlice.reducer,
    },
})
export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch

#3 ADD SLICE...
const initialState = {loading: false, ready: false, data: [], error: null};
export const catsSlice = createSlice({
    name: 'skills',
    initialState,
    reducers: {
        fetchCatsRequest: (state) => {
            state.loading = true;
        },
        fetchCatsSuccess: (state, action) => {
            state.loading = false;
            state.ready = true;
            state.data = action.payload;
        },
    },
})

export const {fetchCatsRequest, fetchCatsSuccess, fetchCatsReload} = catsSlice.actions;
export const selectCats = (state: RootState) => state.cats

#4 DISPATCH AND SUBSCRIBE
const {data, loading, error, ready} = useAppSelector(selectCats);
const dispatch = useAppDispatch()

useEffect(() => {
    if (!ready) {
        dispatch(fetchCatsRequest());
        axios.get('https://api.thecatapi.com/v1/images/search?limit=10')
            .then(response => {
                dispatch(fetchCatsSuccess(response.data));
            })
            .catch(() => {
                alert(error);
            });
    }
}, [dispatch, error, ready]);

__________________________________________
// FETCH

React.useEffect(() => {
    fetch("http://hn.algolia.com/api/v1/search?query=react")
      .then((response) => response.json())
      .then((data) => setData(data));
  }, []);

_____________________________________________________________
// AXIOS (cats.tsx)

const { data, loading, error, ready } = useAppSelector(selectCats);
    const dispatch = useAppDispatch()

    useEffect(() => {
        if(!ready) {
            dispatch(fetchCatsRequest());
            axios.get('https://api.thecatapi.com/v1/images/search?limit=10')
                .then(response => {
                    dispatch(fetchCatsSuccess(response.data));
                })
                .catch(() => {
                    alert(error);
                });
        }
    }, [dispatch,error,ready]);

    const reloadCats = () => {
        dispatch(fetchCatsReload())
    }


______________________________________________________________
// TESTING
import ShallowRenderer from "react-test-renderer/shallow";
const renderer = new ShallowRenderer();
renderer.render(<MyComponent />);

const result = renderer.getRenderOutput();

expect(result.type).toBe("div");
expect(result.props.children).toEqual([
  <span className={"heading"}>{"Title"}</span>,
  <span className={"description"}>{"Description"}</span>,
]);














